name: Create release

on:
  workflow_call:

jobs:

  compute-version:
    uses: ./.github/workflows/gitversion.yml
    with:
      is_prerelease: false

  release-flow:
    needs: compute-version
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Invoking workflow has to pass a personal access token with permission to pull/push on the target repo.
          token: ${{ secrets.PUSH_TO_GITHUB_REPO_PAT }}
          
      - name: Save NuGet version to a variable for easy access.
        run: |
          echo "NUGET_VERSION=${{ needs.compute-version.outputs.package_version }}" >> $GITHUB_ENV

      - name: Setup git config
        run: |
          # Setup bot user who will own the commits. We use the 'GitHub Actions Bot'.
          git config user.name github-actions
          git config user.email github-actions@github.com
          
      - name: Start release branch
        run: |
          git checkout develop
          echo Create release branch release/X.X.X
          git checkout -b release/${{ env.NUGET_VERSION }}
          
      - name: Commit and merge changes
        run: |
          # Change version number in all *.csproj files.
          echo Change version number, commit and push.
          find . -type f -name "*.csproj" -exec sed -i 's#<PackageVersion>[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]#<PackageVersion>${{ env.NUGET_VERSION }}#g' '{}' \;
          find . -type f -name "*.csproj" -exec sed -i 's#<AssemblyVersion>[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]#<AssemblyVersion>${{ env.NUGET_VERSION }}#g' '{}' \;

          git add *.csproj
          git commit -m "Raises version number to ${{ env.NUGET_VERSION }}"
          
          echo Checkout main
          git checkout main
          
          echo Merge release into main
          git merge --no-ff release/${{ env.NUGET_VERSION }}
          
          echo Deleting temporary release branch
          git branch -d release/${{ env.NUGET_VERSION }}
          
          echo Tag release commit
          git tag release/${{ env.NUGET_VERSION }}
          
          echo Creating support branch
          git checkout -b support/${{ env.NUGET_VERSION }}
          
          echo Checkout develop
          git checkout develop
          echo Merge back main into develop
          git merge --no-ff main
          
      - name: Push all branches
        run: |
          git checkout main
          # We push branch "main" with all tags so nothing gets lost.
          git push origin main --tags
          git checkout develop
          git push origin develop
          # We keep the support branch for bug and security fixes.
          git checkout support/${{ env.NUGET_VERSION }}
          git push origin support/${{ env.NUGET_VERSION }}
          
  build-and-publish:
    needs: release-flow
    # Last but not least, run, package and publish from "main" to upload stable NuGet.
    uses: ./.github/workflows/build-and-pack.yml
    with:
      configuration: "Release"
      do_pack: true
      is_prerelease: false
      suffix: "stable"
      publish_target: "nuget.org"
    secrets: inherit
